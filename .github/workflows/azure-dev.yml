name: AZD Deploy

on:
  workflow_dispatch:
  push:
    # Run when commits are pushed to mainline branch (main or master)
    # Set this to the mainline branch you are using
    branches:
      - main
      - 'feature/*'

# GitHub Actions workflow to deploy to Azure using azd
# To configure required secrets for connecting to Azure, simply run `azd pipeline config`

# Set up permissions for deploying with secretless Azure federated credentials
# https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-portal%2Clinux#set-up-azure-login-with-openid-connect-authentication
permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
      AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      AZD_INITIAL_ENVIRONMENT_CONFIG: ${{ secrets.AZD_INITIAL_ENVIRONMENT_CONFIG }}
      # USE_EXISTING_API_CENTER: ${{ vars.USE_EXISTING_API_CENTER }}
      # AZURE_API_CENTER: ${{ vars.AZURE_API_CENTER }}
      # AZURE_API_CENTER_LOCATION: ${{ vars.AZURE_API_CENTER_LOCATION }}
      # AZURE_API_CENTER_RESOURCE_GROUP: ${{ vars.AZURE_API_CENTER_RESOURCE_GROUP }}
      # USE_MONITORING: ${{ vars.USE_MONITORING }}
      # AZURE_STATIC_APP_LOCATION: ${{ vars.AZURE_STATIC_APP_LOCATION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/Iron'

      - name: Install azd
        uses: Azure/setup-azd@v1.0.0

      - name: Log in with Azure Dev CLI (Federated Credentials)
        if: ${{ env.AZURE_CLIENT_ID != '' }}
        run: |
          azd auth login `
            --client-id "$Env:AZURE_CLIENT_ID" `
            --federated-credential-provider "github" `
            --tenant-id "$Env:AZURE_TENANT_ID"
        shell: pwsh

      - name: Login to Azure CLI (Federated Credentials)
        if: ${{ env.AZURE_CLIENT_ID != '' }}
        uses: Azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}

      - name: Log in with Azure Dev CLI (Client Credentials)
        if: ${{ env.AZURE_CREDENTIALS != '' }}
        run: |
          $info = $Env:AZURE_CREDENTIALS | ConvertFrom-Json -AsHashtable;
          Write-Host "::add-mask::$($info.clientSecret)"

          azd auth login `
            --client-id "$($info.clientId)" `
            --client-secret "$($info.clientSecret)" `
            --tenant-id "$($info.tenantId)"
        shell: pwsh
        env:
          AZURE_CREDENTIALS: ${{ env.AZURE_CREDENTIALS }}

      - name: Login to Azure CLI (Client Credentials)
        if: ${{ env.AZURE_CREDENTIALS != '' }}
        uses: Azure/login@v2
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      - name: Provision Infrastructure
        if: ${{ env.AZURE_CLIENT_ID != '' || env.AZURE_CREDENTIALS != '' }}
        run: azd provision --no-prompt
        env:
          AZURE_ENV_NAME: ${{ env.AZURE_ENV_NAME }}
          AZURE_LOCATION: ${{ env.AZURE_LOCATION }}
          AZURE_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
          AZD_INITIAL_ENVIRONMENT_CONFIG: ${{ env.AZD_INITIAL_ENVIRONMENT_CONFIG }}
         #  USE_EXISTING_API_CENTER: ${{ env.USE_EXISTING_API_CENTER }}
         #  AZURE_API_CENTER: ${{ env.AZURE_API_CENTER }}
         #  AZURE_API_CENTER_LOCATION: ${{ env.AZURE_API_CENTER_LOCATION }}
         #  AZURE_API_CENTER_RESOURCE_GROUP: ${{ env.AZURE_API_CENTER_RESOURCE_GROUP }}
         #  USE_MONITORING: ${{ env.USE_MONITORING }}
         #  AZURE_STATIC_APP_LOCATION: ${{ env.AZURE_STATIC_APP_LOCATION }}

      # - name: Build artifact
      #   shell: bash
      #   run: |
      #     npm install
      #     npm run build

      - name: Deploy Application
        if: ${{ env.AZURE_CLIENT_ID != '' || env.AZURE_CREDENTIALS != '' }}
        run: azd deploy --no-prompt
        env:
          AZURE_ENV_NAME: ${{ env.AZURE_ENV_NAME }}
          AZURE_LOCATION: ${{ env.AZURE_LOCATION }}
          AZURE_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
          AZD_INITIAL_ENVIRONMENT_CONFIG: ${{ env.AZD_INITIAL_ENVIRONMENT_CONFIG }}
          # USE_EXISTING_API_CENTER: ${{ env.USE_EXISTING_API_CENTER }}
          # AZURE_API_CENTER: ${{ env.AZURE_API_CENTER }}
          # AZURE_API_CENTER_LOCATION: ${{ env.AZURE_API_CENTER_LOCATION }}
          # AZURE_API_CENTER_RESOURCE_GROUP: ${{ env.AZURE_API_CENTER_RESOURCE_GROUP }}
          # USE_MONITORING: ${{ env.USE_MONITORING }}
          # AZURE_STATIC_APP_LOCATION: ${{ env.AZURE_STATIC_APP_LOCATION }}
